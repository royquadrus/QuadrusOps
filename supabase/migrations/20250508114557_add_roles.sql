create schema if not exists "perms";

create table "perms"."roles" (
    "role_id" bigint generated by default as identity not null,
    "role_name" text not null,
    "role_description" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "perms"."roles" enable row level security;

CREATE UNIQUE INDEX roles_pkey ON perms.roles USING btree (role_id);

CREATE UNIQUE INDEX roles_role_name_key ON perms.roles USING btree (role_name);

alter table "perms"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "perms"."roles" add constraint "roles_role_name_key" UNIQUE using index "roles_role_name_key";

create table "perms"."employee_roles" (
    "employee_id" bigint not null,
    "role_id" bigint not null
);


alter table "perms"."employee_roles" enable row level security;

CREATE UNIQUE INDEX employee_roles_pkey ON perms.employee_roles USING btree (employee_id, role_id);

alter table "perms"."employee_roles" add constraint "employee_roles_pkey" PRIMARY KEY using index "employee_roles_pkey";

alter table "perms"."employee_roles" add constraint "employee_roles_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES hr.employees(employee_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "perms"."employee_roles" validate constraint "employee_roles_employee_id_fkey";

alter table "perms"."employee_roles" add constraint "employee_roles_role_id_fkey" FOREIGN KEY (role_id) REFERENCES perms.roles(role_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "perms"."employee_roles" validate constraint "employee_roles_role_id_fkey";